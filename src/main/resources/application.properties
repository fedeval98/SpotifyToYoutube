spring.application.name=playlisttransfer
spring.data.rest.base-path=/rest
spring.jackson.serialization.INDENT_OUTPUT=true
spring.datasource.url=${DB2_URL}:${DB2_PORT}/${DB2_NAME}
spring.datasource.username=${DB2_USERNAME}
spring.datasource.password=${DB2_PASSWORD}
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create

loggin.level.org.springframework.security=TRACE

# Spotify OAuth2 configuration
spring.security.oauth2.client.registration.spotify.client-id=${SPOTIFY_CLIENT_ID}
spring.security.oauth2.client.registration.spotify.client-secret=${SPOTIFY_SECRET}
spring.security.oauth2.client.registration.spotify.scope=user-read-private,user-read-email,playlist-read-private
spring.security.oauth2.client.registration.spotify.redirect-uri=${BASE_URL}/login/oauth2/code/spotify
spring.security.oauth2.client.registration.spotify.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spotify.client-name=Spotify

spring.security.oauth2.client.provider.spotify.authorization-uri=${SPOTIFY_AUTH_URI}
spring.security.oauth2.client.provider.spotify.token-uri=${SPOTIFY_TOKEN_URI}
spring.security.oauth2.client.provider.spotify.user-info-uri=${SPOTIFY_INFO_URI}
spring.security.oauth2.client.provider.spotify.user-name-attribute=id

# Google OAuth2 configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_SECRET}
spring.security.oauth2.client.registration.google.scope=openid, profile, email
spring.security.oauth2.client.registration.google.redirect-uri=${BASE_URL}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.client-name=Google